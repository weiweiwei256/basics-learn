<style lang="less">
</style>
<template>
  <view class="container"
        @tap.capture='captureTap'>
    <view>demo</view>
    <view>
      <child :name.sync='myData'></child>
    </view>
    <view>
      <child1 :name='myData'></child1>
    </view>
    <view>
      <text>{{myData}}</text>
      <button @tap='handleTap'>change parent data</button>
      <button @tap='broadcast'>broadcast</button>
      <button @tap='invoke'>invoke</button>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import Child from '../components/cpt/Child';
export default class Demo extends wepy.page {
  customData = {}; // 自定义数据

  customFunction() {} //自定义方法

  onLoad() {} // 在Page和Component共用的生命周期函数

  onShow() {} // 只在Page中存在的页面生命周期函数

  config = {
    navigationBarTitleText: 'demo nav'
  }; // 只在Page实例中存在的配置数据，对应于原生的page.json文件

  data = {
    myData: 'parent data'
  }; // 页面所需数据均需在这里声明，可用于模板数据绑定

  components = {
    child: Child,
    child1: Child
  }; // 声明页面中所引用的组件，或声明组件中所引用的子组件

  mixins = []; // 声明页面所引用的Mixin实例

  computed = {}; // 声明计算属性（详见后文介绍）

  watch = {}; // 声明数据watcher（详见后文介绍）

  methods = {
    captureTap: function(e) {
      // console.log(e);
    },
    handleTap: function() {
      this.myData += 'p';
      console.log(this.myData);
    },
    broadcast: function() {
      this.$broadcast('page-broadcast', 1, 1, 1);
    },
    invoke: function() {
      this.$invoke('child', 'customFunction', 'demo invoke');
      this.$invoke('child/subchild', 'subCustomFunction', 'demo invoke');
    }
  }; // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

  events = {
    'sub-child-emit': (p1, p2, p3, $event) => {
      console.log(
        `${this.$name} receive ${$event.name} from ${$event.source.$name}`
      );
    }
  }; // 声明组件之间的事件处理函数
}
</script>
