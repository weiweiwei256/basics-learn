<style lang="less">
.child-container {
  height: 300rpx;
  margin: 30rpx;
  width: 100%;
  background-color: rgba(56, 56, 190, 0.493);
}
</style>
<template>
  <view id='child'
        class="child-container">
    <view style='border:1px solid black'>
      <subchild></subchild>
    </view>

    <text>{{name}}</text>
    <view>
      <text>{{reverseName}}</text>
    </view>
    <view> <button @tap="handleTap"
              size="mini"> click</button>
      <button @tap="handleTap2"
              size="mini"> invoke</button>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import SubChild from './SubChild';
export default class Child extends wepy.component {
  props = {
    name: { type: String, default: 'weiyajun', twoWay: true }
  };
  customData = {}; // 自定义数据
  //自定义方法
  customFunction(str) {
    console.log(this);
    console.log(str);
  }
  // 只在Page中存在的页面生命周期函数
  onLoad() {
    console.log(this.name);
  } // 在Page和Component共用的生命周期函数

  onShow() {
    console.log(this.name);
  }
  // 页面所需数据均需在这里声明，可用于模板数据绑定
  data = {};
  // 声明页面中所引用的组件，或声明组件中所引用的子组件
  components = {
    subchild: SubChild
  };
  // 声明页面所引用的Mixin实例
  mixins = [];
  // 声明计算属性（详见后文介绍）
  computed = {
    reverseName: function() {
      return this.name
        .split('')
        .reverse()
        .join('');
    }
  };
  // 声明数据watcher（详见后文介绍）
  watch = {
    name: function(newValue, oldValue) {
      console.log(`num value: ${oldValue} -> ${newValue}`);
    }
  };
  // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明
  methods = {
    handleTap: function() {
      console.log(this);
      this.name += 'c';
      console.log(this.name);
    },
    handleTap2: a => {
      console.log('handle tap2');
      this.customFunction('child invoke custom function');
      setTimeout(() => {
        this.name = 'async change';
        this.$apply();
      }, 0);
    }
  };
  // 声明组件之间的事件处理函数
  events = {
    'page-broadcast': (p1, p2, p3, $event) => {
      console.log(
        `${this.$name} receive ${$event.name} from ${$event.source.$name}`
      );
    },
    'sub-child-emit': (p1, p2, p3, $event) => {
      console.log(
        `${this.$name} receive ${$event.name} from ${$event.source.$name}`
      );
    }
  };
}
</script>
